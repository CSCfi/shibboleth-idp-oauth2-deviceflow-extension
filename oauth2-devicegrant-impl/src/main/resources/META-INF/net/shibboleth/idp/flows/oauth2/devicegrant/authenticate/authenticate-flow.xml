<?xml version="1.0"?>
<flow xmlns="http://www.springframework.org/schema/webflow" 
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd" 
      parent="oauth2/device/abstract">

  <action-state id="InitializeProfileRequestContext">
    <evaluate expression="InitializeProfileRequestContext"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="DecodeMessage"/>
  </action-state>

  <action-state id="DecodeMessage">
    <evaluate expression="DecodeMessage"/>
    <evaluate expression="ExtractUserCodeFromMessage"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="PostDecodeMessage"/>
    <transition on="NoUserCode" to="DisplayUserCodePage"/>
  </action-state>

  <view-state id="DisplayUserCodePage" view="#{flowRequestContext.activeFlow.id}-usercode">
    <on-render>
      <evaluate expression="environment" result="viewScope.environment"/>
      <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext"/>
      <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response"/>
      <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="viewScope.custom"/>
    </on-render>
    <transition on="proceed" to="ExtractUserCodeFromFormRequest"/>
  </view-state>

  <action-state id="ExtractUserCodeFromFormRequest">
    <evaluate expression="ExtractUserCodeFromFormRequest"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="PostDecodeMessage"/>
  </action-state>

  <action-state id="PostDecodeMessage">
    <evaluate expression="PostDecodePopulateAuditContext"/>
    <evaluate expression="OIDCMetadataLookup"/>
    <evaluate expression="InitializeRelyingPartyContext"/>
    <evaluate expression="SelectRelyingPartyConfiguration"/>
    <evaluate expression="SelectProfileConfiguration"/>
    <evaluate expression="PostLookupPopulateAuditContext"/>
    <evaluate expression="PopulateUserAgentContext"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="OutboundContextsAndSecurityParameters"/>
  </action-state>

  <action-state id="OutboundContextsAndSecurityParameters">
    <evaluate expression="InitializeOutboundMessageContext"/>
    <evaluate expression="ValidateScope"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="PopulateClientStorageLoadContext" />
  </action-state>

  <action-state id="PopulateClientStorageLoadContext">
    <evaluate expression="PopulateClientStorageLoadContext" />
    <evaluate expression="'proceed'" />
    <transition on="proceed" to="ClientStorageLoad" />
    <transition on="NoLoadNeeded" to="PostInitialSetup" />
  </action-state>

  <subflow-state id="ClientStorageLoad" subflow="client-storage/read">
    <input name="calledAsSubflow" value="true" />
    <transition on="proceed" to="PostInitialSetup" />
  </subflow-state>

  <action-state id="PostInitialSetup">
    <evaluate expression="InitializeAuthenticationContext"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="DoAuthenticationSubflow"/>
  </action-state>

  <subflow-state id="DoAuthenticationSubflow" subflow="authn">
    <input name="calledAsSubflow" value="true"/>
    <transition on="proceed" to="SetAuthenticationInformationToResponseContext"/>
    <transition on="RestartAuthentication" to="PostInitialSetup"/>
  </subflow-state>

  <action-state id="SetAuthenticationInformationToResponseContext">
    <evaluate expression="SetAuthenticationContextClassReferenceToResponseContext"/>
    <evaluate expression="SetAuthenticationTimeToResponseContext"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="AttributeResolution"/>
  </action-state>

  <action-state id="AttributeResolution">
    <evaluate expression="SetSectorIdentifierForAttributeResolution"/>
    <evaluate expression="ResolveAttributes"/>
    <evaluate expression="FilterAttributes"/>
    <evaluate expression="PopulatePostAuthnInterceptContext"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="CheckPostAuthnInterceptContext"/>
  </action-state>

  <decision-state id="CheckPostAuthnInterceptContext">
    <if test="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.profile.context.ProfileInterceptorContext)).getAvailableFlows().isEmpty()" then="SubjectResolution" else="DoPostAuthnInterceptSubflow"/>
  </decision-state>

  <subflow-state id="DoPostAuthnInterceptSubflow" subflow="intercept">
    <input name="calledAsSubflow" value="true"/>
    <transition on="proceed" to="SubjectResolution"/>
    <transition on="RestartAuthentication" to="PostInitialSetup"/>
  </subflow-state>

  <action-state id="SubjectResolution">
    <evaluate expression="SetSubjectToResponseContext"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="DisplayUserApprovalPage"/>
  </action-state>

  <view-state id="DisplayUserApprovalPage" view="#{flowRequestContext.activeFlow.id}-userapproval">
    <on-render>
      <evaluate expression="environment" result="viewScope.environment"/>
      <evaluate expression="opensamlProfileRequestContext" result="viewScope.profileRequestContext"/>
      <evaluate expression="opensamlProfileRequestContext.getInboundMessageContext().getSubcontext(T(fi.csc.idpextension.oauth2.messaging.context.DeviceUserAuthenticationContext)).getUserCode()" result="viewScope.userCode"/>
      <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="viewScope.encoder"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="viewScope.request"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="viewScope.response"/>
      <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="viewScope.custom"/>
    </on-render>
    <transition on="proceed" to="StoreDeviceState">
      <evaluate expression="opensamlProfileRequestContext.getInboundMessageContext().getSubcontext(T(fi.csc.idpextension.oauth2.messaging.context.DeviceUserAuthenticationContext)).setUserApproved(true)"/>
    </transition>
    <transition on="deny" to="StoreDeviceState">
      <evaluate expression="opensamlProfileRequestContext.getInboundMessageContext().getSubcontext(T(fi.csc.idpextension.oauth2.messaging.context.DeviceUserAuthenticationContext)).setUserApproved(false)"/>
    </transition>
  </view-state>

  <action-state id="StoreDeviceState">
    <evaluate expression="SetTokenDeliveryAttributesToResponseContext" />
    <evaluate expression="SetConsentToResponseContext" />
    <evaluate expression="StoreDeviceState"/>
    <evaluate expression="WriteAuditLog"/>
    <evaluate expression="'proceed'"/>
    <transition on="proceed" to="DisplayEnd"/>
  </action-state>

  <decision-state id="HandleError">
    <if test="flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').containsKey(currentEvent.id) and flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.LocalEventMap').get(currentEvent.id)" then="AuditedErrorView" else="ErrorView"/>
  </decision-state>

  <end-state id="AuditedErrorView" view="#{MapEventToView.apply(currentEvent)}">
    <on-entry>
      <evaluate expression="ErrorViewPopulateAuditContext"/>
      <evaluate expression="WriteAuditLog"/>
      <evaluate expression="environment" result="requestScope.environment"/>
      <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext"/>
      <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response"/>
      <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom"/>
    </on-entry>
    <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
  </end-state>

  <end-state id="ErrorView" view="#{MapEventToView.apply(currentEvent)}">
    <on-entry>
      <evaluate expression="environment" result="requestScope.environment"/>
      <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext"/>
      <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response"/>
      <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom"/>
    </on-entry>
    <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
  </end-state>

  <end-state id="DisplayEnd" view="#{flowRequestContext.activeFlow.id}-end">
    <on-entry>
      <evaluate expression="environment" result="requestScope.environment"/>
      <evaluate expression="opensamlProfileRequestContext" result="requestScope.profileRequestContext"/>
      <evaluate expression="T(net.shibboleth.utilities.java.support.codec.HTMLEncoder)" result="requestScope.encoder"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="requestScope.request"/>
      <evaluate expression="flowRequestContext.getExternalContext().getNativeResponse()" result="requestScope.response"/>
      <evaluate expression="flowRequestContext.getActiveFlow().getApplicationContext().containsBean('shibboleth.CustomViewContext') ? flowRequestContext.getActiveFlow().getApplicationContext().getBean('shibboleth.CustomViewContext') : null" result="requestScope.custom"/>
    </on-entry>
    <exception-handler bean="RethrowingFlowExecutionExceptionHandler"/>
  </end-state>

  <bean-import resource="authenticate-beans.xml"/>
</flow>
