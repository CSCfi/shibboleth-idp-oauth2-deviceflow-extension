<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:c="http://www.springframework.org/schema/c" 
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:util="http://www.springframework.org/schema/util" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-init-method="initialize" default-destroy-method="destroy">
       
  <bean id="RethrowingFlowExecutionExceptionHandler" class="net.shibboleth.idp.profile.impl.RethrowingFlowExecutionExceptionHandler"/>
  
  <bean id="DecodeMessage" class="org.opensaml.profile.action.impl.DecodeMessage" scope="prototype">
    <constructor-arg>
      <bean class="fi.csc.idpextension.oauth2.decoding.impl.OAuth2DeviceAuthenticationRequestDecoder" scope="prototype" 
        p:httpServletRequest-ref="shibboleth.HttpServletRequest"/>
    </constructor-arg>
  </bean>
  
  <bean id="ExtractUserCodeFromMessage" class="fi.csc.idpextension.oauth2.profile.impl.ExtractUserCodeFromMessage" scope="prototype"/>
  
  <bean id="ExtractUserCodeFromFormRequest" class="fi.csc.idpextension.oauth2.profile.impl.ExtractUserCodeFromFormRequest" 
    scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest"/>
    
  <bean id="InitializeAuthenticationContext" class="fi.csc.idpextension.oauth2.profile.impl.InitializeAuthenticationContext" 
    scope="prototype"/>
  
  <bean id="InitializeRelyingPartyContext" class="org.geant.idpextension.oidc.profile.impl.InitializeRelyingPartyContext" 
    scope="prototype" p:clientIDLookupStrategy-ref="shibboleth.deviceflow.ClientIDLookupStrategy"/>
    
  <bean id="shibboleth.deviceflow.ClientIDLookupStrategy" class="fi.csc.idpextension.oauth2.profile.context.navigate.DeviceClientIDLookupFunction" 
    scope="prototype" p:deviceCodesCache-ref="shibboleth.DeviceCodesCache"/>
    
  <bean id="PopulateUserAgentContext" class="net.shibboleth.idp.profile.impl.PopulateUserAgentContext" 
    scope="prototype" p:httpServletRequest-ref="shibboleth.HttpServletRequest"/>
    
  <bean id="OIDCMetadataLookup" class="net.shibboleth.idp.profile.impl.WebFlowMessageHandlerAdaptor" 
    scope="prototype" c:executionDirection="INBOUND">
    <constructor-arg name="messageHandler">
      <bean class="org.geant.idpextension.oidc.profile.impl.OIDCMetadataLookupHandler" scope="prototype" 
        p:clientIDLookupStrategy-ref="shibboleth.deviceflow.ClientIDLookupStrategy">
        <property name="clientInformationResolver">
          <ref bean="shibboleth.ClientInformationResolver"/>
        </property>
      </bean>
    </constructor-arg>
  </bean>
  
  <bean id="SetSectorIdentifierForAttributeResolution" class="org.geant.idpextension.oidc.profile.impl.SetSectorIdentifierForAttributeResolution" 
  scope="prototype"/>
  
  <bean id="PopulatePostAuthnInterceptContext" class="net.shibboleth.idp.profile.interceptor.impl.PopulateProfileInterceptorContext" 
    scope="prototype" p:availableFlows-ref="shibboleth.AvailableInterceptFlows">
    <property name="activeFlowsLookupStrategy">
      <bean class="net.shibboleth.idp.authn.config.navigate.PostAuthenticationFlowsLookupFunction"/>
    </property>
  </bean>
  
  <bean id="ValidateScope" class="org.geant.idpextension.oidc.profile.impl.ValidateScope" 
    scope="prototype" p:scopeLookupStrategy-ref="shibboleth.deviceflow.ScopeLookupStrategy"/>
    
  <bean id="shibboleth.deviceflow.ScopeLookupStrategy" class="fi.csc.idpextension.oauth2.profile.context.navigate.DeviceScopeLookupFunction" 
    scope="prototype" p:deviceCodesCache-ref="shibboleth.DeviceCodesCache"/>
    
  <bean id="PopulateClientStorageLoadContext"
    class="org.opensaml.storage.impl.client.PopulateClientStorageLoadContext" scope="prototype"
    p:storageServices="#{ getObject('shibboleth.ClientStorageServices') ?: getObject('shibboleth.DefaultClientStorageServices') }" />

  <bean id="SetAuthenticationTimeToResponseContext" class="org.geant.idpextension.oidc.profile.impl.SetAuthenticationTimeToResponseContext" 
    scope="prototype"/>

  <bean id="SetAuthenticationContextClassReferenceToResponseContext" class="org.geant.idpextension.oidc.profile.impl.SetAuthenticationContextClassReferenceToResponseContext"
    scope="prototype">
    <property name="classRefLookupStrategy">
      <bean class="net.shibboleth.idp.authn.principal.DefaultPrincipalDeterminationStrategy" 
        c:type="org.geant.idpextension.oidc.authn.principal.AuthenticationContextClassReferencePrincipal">
        <constructor-arg name="principal">
          <bean class="org.geant.idpextension.oidc.authn.principal.AuthenticationContextClassReferencePrincipal" 
            c:classRef="#{T(org.geant.idpextension.oidc.authn.principal.AuthenticationContextClassReferencePrincipal).UNSPECIFIED}"/>
        </constructor-arg>
      </bean>
    </property>
  </bean>
  
  <bean id="SetSubjectToResponseContext" class="org.geant.idpextension.oidc.profile.impl.SetSubjectToResponseContext" scope="prototype">
    <property name="subjectLookupStrategy">
      <bean class="org.geant.idpextension.oidc.profile.logic.AttributeResolutionSubjectLookupFunction" p:transcoderRegistry-ref="shibboleth.AttributeRegistryService"/>
    </property>
    <property name="subjectTypeLookupStrategy">
      <bean class="org.geant.idpextension.oidc.profile.logic.DefaultSubjectTypeStrategy"/>
    </property>
  </bean>
  
  <bean id="InitializeOutboundMessageContext" class="org.geant.idpextension.oidc.profile.impl.InitializeOutboundAuthenticationResponseMessageContext" 
    scope="prototype"/>
    
  <bean id="SetTokenDeliveryAttributesToResponseContext" class="org.geant.idpextension.oidc.profile.impl.SetTokenDeliveryAttributesToResponseContext" scope="prototype"
    p:transcoderRegistry-ref="shibboleth.AttributeRegistryService"/>

  <bean id="SetConsentToResponseContext" class="org.geant.idpextension.oidc.profile.impl.SetConsentToResponseContext" scope="prototype" />

  <bean id="StoreDeviceState" class="fi.csc.idpextension.oauth2.profile.impl.StoreDeviceState" 
    scope="prototype" c:sealer-ref="tokenSealer" p:deviceCodesCache-ref="shibboleth.DeviceCodesCache"/>
    
  <bean id="ErrorViewPopulateAuditContext" parent="shibboleth.AbstractPopulateAuditContext" 
    p:fieldExtractors="#{getObject('shibboleth.ErrorViewAuditExtractors') ?: getObject('shibboleth.DefaultErrorViewAuditExtractors')}"/>
    
  <bean id="MapEventToView" class="net.shibboleth.idp.profile.context.navigate.SpringEventToViewLookupFunction" 
    p:defaultView-ref="shibboleth.DefaultErrorView" p:eventMap="#{getObject('shibboleth.EventViewMap')}"/>
    
</beans>
